version: '2.3'

services:
    gateway:
        restart: unless-stopped
        container_name: gateway
#        build:
#            context: ../cloud-gateway-service
#            dockerfile: src/main/docker/Dockerfile.gateway
        image: mgperez/gateway:jvm
        ports: ['8888:8888']
        networks:
            - quarkus
        links:
            - login-service:login-service
            - summary-service:summary-service
            - first-service:first-service
            - second-service:second-service
            - web:web
        depends_on:
            first-service:
                condition: service_healthy
            second-service:
                condition: service_healthy
            summary-service:
                condition: service_healthy
        environment:
            - LOGIN_HOST=login-service:8080
            - SUMMARY_HOST=summary-service:8080
            - MS1_HOST=first-service:8080
            - MS2_HOST=second-service:8080
            - WEB_HOST=web:5000
#        volumes:
#            - spring-cloud-config-repo:/var/lib/spring-cloud/config-repo
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://127.0.0.1:8888/actuator/health || exit 1"]
            interval: 10s
            timeout: 1s
            retries: 66

    first-service:
        restart: unless-stopped
        container_name: first-service
        image: mgperez/first-service:native
#        build:
#            context: ../first-service
#            dockerfile: src/main/docker/Dockerfile.jvm
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/health || exit 1"]
            interval: 10s
            timeout: 1s
            retries: 66
        ports: ['9081:8080'] # the HTTP endpoint
        networks:
            - quarkus

    second-service:
        restart: unless-stopped
        container_name: second-service
        image: mgperez/second-service:native
 #       build:
 #           context: ../second-service
 #           dockerfile: src/main/docker/Dockerfile.jvm
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/health || exit 1"]
            interval: 10s
            timeout: 1s
            retries: 66
        ports: ['9082:8080'] # the HTTP endpoint
        networks:
            - quarkus

    login-service:
        restart: unless-stopped
        container_name: login-mock
        image: smartgates/login-mock:latest
#        build:
#            context: ../../../JulianToledano/quarkus_login
#            dockerfile: src/main/docker/Dockerfile.jvm
#        healthcheck:
#            test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/health || exit 1"]
#            interval: 10s
#            timeout: 1s
#            retries: 66
        ports: ['9080:8080'] # the HTTP endpoint
        networks:
            - quarkus

    summary-service:
        restart: unless-stopped
        container_name: summary-mock
        image: mgperez/summary-mock:jvm
#        build:
#            context: ../quarkus-hibernate
#            dockerfile: src/main/docker/Dockerfile.native
        environment:
            PGHOST: database
            PGDATABASE: statistics
            PGUSER: sarah
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080/health || exit 1"]
            interval: 10s
            timeout: 1s
            retries: 66
        ports: ['9083:8080'] # the HTTP endpoint
        links:
            - database:database
        depends_on:
            database:
                condition: service_healthy
        networks:
            - quarkus

    database:
        image: postgres:latest
        restart: always
        container_name: database
        environment:
            POSTGRES_USER: sarah
            POSTGRES_DB: statistics
            POSTGRES_PASSWORD: connor
        ports: ['5432:5432'] # the HTTP endpoint
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            - postgres-data:/var/lib/postgresql/data
        networks:
            - quarkus

            
    web:
        #    network_mode: host
#        image: smartgates/ibcs-manager
        image: mgperez/ibcs-manager:2
        container_name: web
        tty: true # Needed to ensure container doesn't self terminate
#        build:
#            context: ./borrame_20200313/operational-registry/mcsegates-operationalreg-front
#            dockerfile: Dockerfile
#            args:
#            - VUE_APP_API_URL=http://localhost:8888/
        privileged: true
        ports: ['5000:8080'] # host:container
        networks:
            - quarkus
    
networks:
    quarkus:
        driver: bridge

# docker volume create --name=postgres-data
volumes:
    postgres-data:
        external: true
#    spring-cloud-config-repo:
#        external: true
